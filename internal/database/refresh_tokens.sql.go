// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens(
  id,
  created_at,
  updated_at,
  user_id,
  expires_at
) 
VALUES (
  $1,
  NOW(),
  NOW(),
  $2,
  $3
)
RETURNING id, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	ID        string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.ID, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_tokens
WHERE id = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, id string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT id, created_at, updated_at, email, hashed_password FROM users
WHERE users.id = (
  SELECT user_id FROM refresh_tokens
  WHERE refresh_tokens.id = $1
)
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const setRevokedAt = `-- name: SetRevokedAt :exec
UPDATE refresh_tokens
SET revoked_at = NOW(), updated_at = NOW()
WHERE id = $1
`

func (q *Queries) SetRevokedAt(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, setRevokedAt, id)
	return err
}
